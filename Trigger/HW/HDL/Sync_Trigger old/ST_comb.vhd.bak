-------------------------------------------------------------------------------
-- Title      : Sync Trigger
-- Project    : Source files in two directories, custom library name, VHDL'87
-------------------------------------------------------------------------------
-- File       : st_comb.vhd
-- Author     :   <kimei@fyspc-epf02>
-- Company    : 
-- Created    : 2011-03-15
-- Last update: 2011-03-17
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: Synchronous trigger part of the CTU in COMPET
-------------------------------------------------------------------------------
-- Copyright (c) 2011 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2011-03-08  1.0      kimei   Created
-------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_ARITH.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
library UNISIM;
use UNISIM.VComponents.all;

library work;
use work.components.all;
use work.constants.all;
use work.functions.all;

entity st_comb is
  generic (
    NO_OF_MODULES : positive := 4);
  port (
    leading_edge_b : in  std_logic_vector(NO_OF_MODULES-1 downto 0);
    mclk           : in  std_logic;
    rst_b         : in  std_logic;
    trigger_out    : out std_logic_vector(NO_OF_MODULES-1 downto 0));
end st_comb;

architecture comb of st_comb is
 
  signal counter : integer range 15 downto 0;
  signal trig_hold : std_logic_vector(trigger_out'length-1 downto 0);
  signal coincidence : std_logic;

  component trigger_hold
    port (
      edge_in_b : in  std_logic;
      mclk      : in  std_logic;
      rst_b     : in  std_logic;
      trig_hold : out std_logic);
  end component;
  
begin
  
   G1 : for I in 0 to (NUMBER_OF_MODULES-1) generate
     trig_hold : trigger_hold
       port map (
         edge_in_b => leading_edge_b(I),
         mclk      => mclk,
         rst_b     => rst_b,
         trig_hold => trig_hold(I));     
   end generate G1;

   --coincidence <= '0' when all_zeros(trig_hold) = '1' else '1';


   
end comb;
