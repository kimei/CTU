<?xml version="1.0" encoding="UTF-8"?>
<RootFolder label="COREGEN" treetype="folder" language="COREGEN">
	<Folder label="VERILOG Component Instantiation" treetype="folder">
		<Template label="fe_ch_fifo" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
fe_ch_fifo YourInstanceName (
    .clk(clk),
    .din(din), // Bus [31 : 0] 
    .rd_en(rd_en),
    .rst(rst),
    .wr_en(wr_en),
    .almost_full(almost_full),
    .dout(dout), // Bus [31 : 0] 
    .empty(empty),
    .full(full),
    .overflow(overflow),
    .valid(valid),
    .wr_ack(wr_ack));

 
		</Template>
		<Template label="comp_6b_equal" treetype="template">
		</Template>
		<Template label="icon" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
icon instance_name (
    .CONTROL0(CONTROL0),
    .CONTROL1(CONTROL1)
);

 
		</Template>
		<Template label="ila" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
ila instance_name (
    .CONTROL(CONTROL),
    .CLK(CLK),
    .TRIG0(TRIG0)
);

 
		</Template>
		<Template label="vio" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
vio instance_name (
    .CONTROL(CONTROL),
    .CLK(CLK),
    .SYNC_OUT(SYNC_OUT)
);

 
		</Template>
		<Template label="comp_11b_equal" treetype="template">
		</Template>
		<Template label="dist_mem_64x8" treetype="template">
		</Template>
		<Template label="fe_FIFO_toUDP" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
fe_FIFO_toUDP YourInstanceName (
    .din(din), // Bus [31 : 0] 
    .rd_clk(rd_clk),
    .rd_en(rd_en),
    .rst(rst),
    .wr_clk(wr_clk),
    .wr_en(wr_en),
    .dout(dout), // Bus [31 : 0] 
    .empty(empty),
    .full(full),
    .rd_data_count(rd_data_count)); // Bus [7 : 0] 

 
		</Template>
		<Template label="BuildEventsFifo" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
BuildEventsFifo YourInstanceName (
    .clk(clk),
    .din(din), // Bus [31 : 0] 
    .rd_en(rd_en),
    .rst(rst),
    .wr_en(wr_en),
    .almost_empty(almost_empty),
    .dout(dout), // Bus [31 : 0] 
    .empty(empty),
    .full(full));

 
		</Template>
		<Template label="GlobalEventTrigger_FIFO" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
GlobalEventTrigger_FIFO YourInstanceName (
    .din(din), // Bus [63 : 0] 
    .rd_clk(rd_clk),
    .rd_en(rd_en),
    .rst(rst),
    .wr_clk(wr_clk),
    .wr_en(wr_en),
    .dout(dout), // Bus [63 : 0] 
    .empty(empty),
    .full(full));

 
		</Template>
	</Folder>
	<Folder label="VHDL Component Instantiation" treetype="folder">
		<Template label="fe_ch_fifo" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component fe_ch_fifo
    port (
    clk: IN std_logic;
    din: IN std_logic_VECTOR(31 downto 0);
    rd_en: IN std_logic;
    rst: IN std_logic;
    wr_en: IN std_logic;
    almost_full: OUT std_logic;
    dout: OUT std_logic_VECTOR(31 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic;
    overflow: OUT std_logic;
    valid: OUT std_logic;
    wr_ack: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : fe_ch_fifo
        port map (
            clk =&gt; clk,
            din =&gt; din,
            rd_en =&gt; rd_en,
            rst =&gt; rst,
            wr_en =&gt; wr_en,
            almost_full =&gt; almost_full,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full,
            overflow =&gt; overflow,
            valid =&gt; valid,
            wr_ack =&gt; wr_ack);
 
		</Template>
		<Template label="comp_6b_equal" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component comp_6b_equal
    port (
    a: IN std_logic_VECTOR(5 downto 0);
    b: IN std_logic_VECTOR(5 downto 0);
    clk: IN std_logic;
    qa_eq_b: OUT std_logic);
end component;

 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : comp_6b_equal
        port map (
            a =&gt; a,
            b =&gt; b,
            clk =&gt; clk,
            qa_eq_b =&gt; qa_eq_b);
 
		</Template>
		<Template label="icon" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component icon
  PORT (
    CONTROL0 : INOUT STD_LOGIC_VECTOR(35 DOWNTO 0);
    CONTROL1 : INOUT STD_LOGIC_VECTOR(35 DOWNTO 0));

end component;

 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 

your_instance_name : icon
  port map (
    CONTROL0 =&gt; CONTROL0,
    CONTROL1 =&gt; CONTROL1);

 
		</Template>
		<Template label="ila" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component ila
  PORT (
    CONTROL : INOUT STD_LOGIC_VECTOR(35 DOWNTO 0);
    CLK : IN STD_LOGIC;
    TRIG0 : IN STD_LOGIC_VECTOR(127 DOWNTO 0));

end component;

 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 

your_instance_name : ila
  port map (
    CONTROL =&gt; CONTROL,
    CLK =&gt; CLK,
    TRIG0 =&gt; TRIG0);

 
		</Template>
		<Template label="vio" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component vio
  PORT (
    CONTROL : INOUT STD_LOGIC_VECTOR(35 DOWNTO 0);
    CLK : IN STD_LOGIC;
    SYNC_OUT : OUT STD_LOGIC_VECTOR(255 DOWNTO 0));

end component;

 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 

your_instance_name : vio
  port map (
    CONTROL =&gt; CONTROL,
    CLK =&gt; CLK,
    SYNC_OUT =&gt; SYNC_OUT);

 
		</Template>
		<Template label="comp_11b_equal" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component comp_11b_equal
    port (
    a: IN std_logic_VECTOR(10 downto 0);
    b: IN std_logic_VECTOR(10 downto 0);
    clk: IN std_logic;
    qa_eq_b: OUT std_logic);
end component;

 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : comp_11b_equal
        port map (
            a =&gt; a,
            b =&gt; b,
            clk =&gt; clk,
            qa_eq_b =&gt; qa_eq_b);
 
		</Template>
		<Template label="dist_mem_64x8" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component dist_mem_64x8
    port (
    a: IN std_logic_VECTOR(5 downto 0);
    clk: IN std_logic;
    qspo: OUT std_logic_VECTOR(7 downto 0));
end component;

 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : dist_mem_64x8
        port map (
            a =&gt; a,
            clk =&gt; clk,
            qspo =&gt; qspo);
 
		</Template>
		<Template label="fe_FIFO_toUDP" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component fe_FIFO_toUDP
    port (
    din: IN std_logic_VECTOR(31 downto 0);
    rd_clk: IN std_logic;
    rd_en: IN std_logic;
    rst: IN std_logic;
    wr_clk: IN std_logic;
    wr_en: IN std_logic;
    dout: OUT std_logic_VECTOR(31 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic;
    rd_data_count: OUT std_logic_VECTOR(7 downto 0));
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : fe_FIFO_toUDP
        port map (
            din =&gt; din,
            rd_clk =&gt; rd_clk,
            rd_en =&gt; rd_en,
            rst =&gt; rst,
            wr_clk =&gt; wr_clk,
            wr_en =&gt; wr_en,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full,
            rd_data_count =&gt; rd_data_count);
 
		</Template>
		<Template label="BuildEventsFifo" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component BuildEventsFifo
    port (
    clk: IN std_logic;
    din: IN std_logic_VECTOR(31 downto 0);
    rd_en: IN std_logic;
    rst: IN std_logic;
    wr_en: IN std_logic;
    almost_empty: OUT std_logic;
    dout: OUT std_logic_VECTOR(31 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : BuildEventsFifo
        port map (
            clk =&gt; clk,
            din =&gt; din,
            rd_en =&gt; rd_en,
            rst =&gt; rst,
            wr_en =&gt; wr_en,
            almost_empty =&gt; almost_empty,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full);
 
		</Template>
		<Template label="GlobalEventTrigger_FIFO" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component GlobalEventTrigger_FIFO
    port (
    din: IN std_logic_VECTOR(63 downto 0);
    rd_clk: IN std_logic;
    rd_en: IN std_logic;
    rst: IN std_logic;
    wr_clk: IN std_logic;
    wr_en: IN std_logic;
    dout: OUT std_logic_VECTOR(63 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : GlobalEventTrigger_FIFO
        port map (
            din =&gt; din,
            rd_clk =&gt; rd_clk,
            rd_en =&gt; rd_en,
            rst =&gt; rst,
            wr_clk =&gt; wr_clk,
            wr_en =&gt; wr_en,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full);
 
		</Template>
	</Folder>
</RootFolder>
