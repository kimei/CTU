
--! \file
--! \brief The Clock Reset Unit


--! Standard library
library ieee;
use ieee.std_logic_1164.all;  --! Standard logic

--! Xilinx Unisim library
library unisim;
use unisim.vcomponents.all;   --! For simulation

--! Work library (self-composed)
library work;
use work.constants.all;       --! Global constants
use work.types.all;           --! Global types
 use work.components.all;      --! Global component declarations


--! \brief Entity
entity cru is
  port(
    fpga_100m_clk     : in  std_logic; --! 100Mhz single-ended board clock
--     fpga_33m_clk      : in  std_logic; -- 33MHz  single-ended, same as Xilinx System ACE utilises
--     fpga_27m_clk      : in  std_logic; -- 27MHz  single-ended, same as USB controller utilises 
--     fpga_200m_clk     : in  std_logic; -- 200MHz differential clock

		-- added by kim
		clk100m_ctu			: in std_logic; -- differential clk input from CTU
		clk100m_ctu_b    	: in std_logic;
		cru_reset			: in std_logic;
		-- end added by kim

    fpga_cpu_reset_b  : in  std_logic; --! Active low system reset (only connected to the IO pad)

    up_clk            : out std_logic; --! 100MHz Microblaze clock
    fe_clk            : out std_logic; --! Front-end clock
    mclk              : out std_logic; --! 50 MHz master (global) clock
    REFCLK_200MHz     : out std_logic;
    REFCLK_125MHz     : out std_logic;


    up_rst_b          : out std_logic; --! Microblaze reset (synchronous assert/deassert)
    fe_rst_b          : out std_logic; --! Front-end reset (async. assert, sync. deassert)
    mrst_b            : out std_logic; --! Master (global) reset (async. assert, sync. deassert)
    UDPRst_200_b      : out std_logic; --! The reset for the UDP, TEMAC and PHY 
	 UDPRst_125_b      : out std_logic --! The reset for the UDP, TEMAC and PHY 
    --cs_vio            : cs_vio_type    --! ChipScope input/output
  );
end entity;


---------------------------------------------------------------------------------------------------
--! \brief Architecture
architecture rtl of cru is
---------------------------------------------------------------------------------------------------

--commented out by kim 09-02-2011 to implement clock switching
--	COMPONENT pll_all
--	PORT(
--		CLKIN1_IN : IN std_logic;
--		RST_IN : IN std_logic;          
--		CLKOUT0_OUT : OUT std_logic;
--		CLKOUT1_OUT : OUT std_logic;
--		CLKOUT2_OUT : OUT std_logic;
--		CLKOUT3_OUT : OUT std_logic;
--		CLKOUT4_OUT : OUT std_logic;
--		LOCKED_OUT : OUT std_logic
--		);
--	END COMPONENT;

-------------------------------------------------
-- Added by Kim 09-02-2011
	COMPONENT PLL_CTU
	PORT(
		CLKINSEL_IN : IN std_logic;
		CLKIN1_IN : IN std_logic;
		CLKIN2_IN : IN std_logic;
		RST_IN : IN std_logic;          
		CLKOUT0_OUT : OUT std_logic;
		CLKOUT1_OUT : OUT std_logic;
		CLKOUT2_OUT : OUT std_logic;
		CLKOUT3_OUT : OUT std_logic;
		CLKOUT4_OUT : OUT std_logic;
		LOCKED_OUT : OUT std_logic
		);
	END COMPONENT;
	
		COMPONENT DCM_phase_adjust
	PORT(
		CLKIN_N_IN : IN std_logic;
		CLKIN_P_IN : IN std_logic;
		RST_IN : IN std_logic;          
		CLKIN_IBUFGDS_OUT : OUT std_logic;
		CLK0_OUT : OUT std_logic;
		LOCKED_OUT : OUT std_logic
		);
	END COMPONENT;
	
signal clk100M_DCM_to_PLL : std_logic;
signal dcm_clk_stable : std_logic;
signal dcm_clk_stable_b : std_logic;
signal reset_ctu_AND_local : std_logic;
signal reset_ctu_AND_local_b: std_logic;
-- end added by Kim 09-02-2011
------------------------------------------------

signal fpga_cpu_reset : std_logic;
signal clk_stable     : std_logic;

signal mclk_i         : std_logic;
signal fe_clk_i       : std_logic;
signal up_clk_i       : std_logic;
signal REFCLK_200MHz_i: std_logic;
signal REFCLK_125MHz_i: std_logic;

signal mrst_b_i       : std_logic;
signal fe_rst_b_i     : std_logic;
signal up_rst_b_i     : std_logic;
signal UDPRst_200_b_i : std_logic;
signal UDPRst_125_b_i : std_logic;

begin

-- The embedded project contains its own DCM, letting this handle the clock.


--Changed by Kim 09-02-2011
--Changed so it instantiates pll_CTU instead of pll_all
--And added CLKIN2_IN which is from the DCM
--
--! Use a PLL to create internal clocks based on the same 100MHz board clock source.
--! This should ease adaption to dynamic switch of source clock..
fpga_cpu_reset <= not fpga_cpu_reset_b;

-- added by Kim 09-02-2011
reset_ctu_AND_local <= fpga_cpu_reset and cru_reset;
reset_ctu_AND_local_b <= not reset_ctu_AND_local ;
signal dcm_clk_stable_b <= not dcm_clk_stable;
-- end added by Kim


clk_gen_pll: pll_CTU port map(
  CLKIN1_IN   => fpga_100m_clk    , --! 100MHz board clock
  CLKIN2_IN	  => clk100M_DCM_to_PLL, -- from the DCM which controls the clk from CTU
  CLKINSEL_IN => dcm_clk_stable_b,
  RST_IN      => fpga_cpu_reset   , --! Board reset
  CLKOUT0_OUT => up_clk_i         , --! Microblaze clock (100 MHz)
  CLKOUT1_OUT => fe_clk_i         , --! Front-end clock
  CLKOUT2_OUT => mclk_i           , --! Master clock (50 MHz)
  CLKOUT3_OUT => REFCLK_125MHz_i  , --! 125MHz clk for UDP
  CLKOUT4_OUT => REFCLK_200MHz_i  , --! 200MHz reference clock for UDP
  LOCKED_OUT  => clk_stable         --! Indicates whether the PLL has a clock lock
);
-- end changed by kim

-- added by Kim
Inst_DCM_phase_adjust: DCM_phase_adjust PORT MAP(
		CLKIN_N_IN => clk100m_ctu_b ,
		CLKIN_P_IN => clk100m_ctu ,
		RST_IN => cru_reset,	-- argh! what to do!!
		CLKIN_IBUFGDS_OUT => open, -- wtf is this doing?!
		CLK0_OUT => clk100M_DCM_to_PLL ,
		LOCKED_OUT => dcm_clk_stable
	);
-- end added by kim
up_clk <= up_clk_i;
fe_clk <= fe_clk_i;
mclk   <= mclk_i;

REFCLK_125MHz<= REFCLK_125MHz_i;
REFCLK_200MHz<= REFCLK_200MHz_i;

--! For the Microblaze, use synchronous assertion and deassertion of reset
--! \todo Add soft resets etc. when available
--! \todo Fix the async hack when reset mux is done
up_rst_sync: entity work.a2s port map(
  srst_b  => '1'              , --! Synchronous  reset
  arst_b  => reset_ctu_AND_local_b , --! Asynchronous reset
  clk     => up_clk_i         , --! Synchronisation clock
  i       => '1'              , --! Asynchronous input
  o       => up_rst_b_i         --! Synchronous  output (metafiltered)
);
up_rst_b <= up_rst_b_i;


fe_rst_sync: entity work.a2s port map(
  srst_b  => '1'              , --! Synchronous  reset
  arst_b  => reset_ctu_AND_local_b , --! Asynchronous reset
  clk     => fe_clk_i         , --! Synchronisation clock
  i       => '1'              , --! Asynchronous input
  o       => fe_rst_b_i         --! Synchronous  output (metafiltered)
);
fe_rst_b <= fe_rst_b_i;-- and cs_vio.fe_soft_rst_b; --! Ok since the soft reset is synchronous


mrst_sync: entity work.a2s port map(
  srst_b  => '1'              , --! Synchronous  reset
  arst_b  => reset_ctu_AND_local_b , --! Asynchronous reset
  clk     => mclk_i           , --! Synchronisation clock
  i       => '1'              , --! Asynchronous input
  o       => mrst_b_i           --! Synchronous  output (metafiltered)
);
mrst_b <= mrst_b_i;


--UDP / TEMAC etc.
UDP_125_Rst_sync: entity work.a2s port map(
  srst_b  => '1'              , --! Synchronous  reset
  arst_b  => reset_ctu_AND_local_b , --! Asynchronous reset
  clk     => REFCLK_125MHz_i  , --! Synchronisation clock
  i       => '1'              , --! Asynchronous input
  o       => UDPRst_125_b_i       --! Synchronous  output (metafiltered)
);

UDPRst_125_b <= UDPRst_125_b_i;

UDP_200_Rst_sync: entity work.a2s port map(
  srst_b  => '1'              , --! Synchronous  reset
  arst_b  => reset_ctu_AND_local_b , --! Asynchronous reset
  clk     => REFCLK_200MHz_i  , --! Synchronisation clock
  i       => '1'              , --! Asynchronous input
  o       => UDPRst_200_b_i       --! Synchronous  output (metafiltered)
);

UDPRst_200_b <= UDPRst_200_b_i;


end architecture;

